#!/bin/ksh
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#

#
# Copyright 2013 Nexenta Systems, Inc.  All rights reserved.
#

# Use distributed make (dmake) by default.
make=${MAKE:-dmake}

CLOSED_IS_PRESENT=no
export CLOSED_IS_PRESENT

[ -n "$SRC" ] || {
  echo "SRC not set.  Run 'ws' or 'bldenv' first."
  exit 1
}

cpu=`uname -p`
case $cpu in
i386)
	x=intel
	mdb_arch="ia32 amd64";
	;;
sparc)
	x=sparc
	mdb_arch=v9
	;;
*)  echo "Huh?" ; exit 1;;
esac

################################################################

build_tools() {
  test -f $SRC/tools/proto/root_i386-nd/opt/onbld/bin/genoffsets ||
    (cd $SRC/tools && $make install)
  (cd $SRC/common/mapfiles; $make install)
}

clobber_tools() {
  (cd $SRC/tools && $make clobber)
  (cd $SRC/common/mapfiles; $make clobber)
}

################################################################

do_hdrs() {

targ=$1
if [ "$targ" = clobber ]
then
  (cd $SRC/uts && $make -k clobber_h)
  (cd $SRC/head && $make clobber)
fi

if [ "$targ" = install ]
then
  targ=install_h

  # Just the parts of "make sgs" we need, and
  # skip them if they appear to be done.
  # ... stuff under $SRC
  test -f $SRC/uts/common/sys/priv_names.h ||
    (cd $SRC/uts && $make -k all_h)

  test -f $SRC/head/rpcsvc/nispasswd.h ||
    (cd $SRC/head && $make -k install_h)

  # ... stuff under $ROOT (proto area)
  test -d $ROOT/usr/include/sys ||
    (cd $SRC && $make rootdirs)
  test -f $ROOT/usr/include/sys/types.h ||
    (cd $SRC/uts && $make -k install_h)
  test -f $ROOT/usr/include/rpcsvc/daemon_utils.h ||
    (cd $SRC/head && $make install_h)

  # always update the smbsrv headers to be safe
  # test -f $ROOT/usr/include/smbsrv/wintypes.h ||
    (cd $SRC/uts/common/smbsrv && $make -k install_h)

fi

# Need some library headers too...
for lib in \
  libbsm \
  libcmdutils \
  libcryptoutil \
  libdevid \
  libidmap \
  libpam \
  libsec \
  libzfs_core \
  libzfs \
  libshare \
  libsmbfs \
  libuutil \
  libscf \
  passwdutil \
  libsqlite \
  smbsrv
do
  (cd $SRC/lib/$lib && $make $targ)
done
}

################################################################

do_kern() {
  case $1 in
  lint) targ=modlintlib ;;
  *) targ=$1 ;;
  esac
  (cd $SRC/uts/$x/nsmb && $make $targ)
  (cd $SRC/uts/$x/smbfs && $make $targ)
  (cd $SRC/uts/$x/smbsrv && $make $targ)
}

################################################################

do_libs() {

for lib in \
  libavl \
  libcmdutils \
  libsmbfs \
  libsqlite \
  libuutil
do
  (cd $SRC/lib/$lib && $make $1)
done

(cd $SRC/lib/libshare && $make $1 PLUGINS=smb)
(cd $SRC/lib/smbsrv && $make $1)
(cd $SRC/lib/passwdutil && $make $1)
(cd $SRC/lib/pam_modules/smb && $make $1)

}

################################################################

do_cmds() {

case $1 in
install)
  # mount programs need fslib.o
  (cd $SRC/cmd/fs.d && $make fslib.o)
  (cd $SRC/cmd/fs.d/smbclnt && $make $1 catalog)
  ;;
clean|clobber)
  (cd $SRC/cmd/fs.d/smbclnt && $make $1)
  (cd $SRC/cmd/fs.d && $make ${1}_local)
  ;;
esac
  
(cd $SRC/cmd/devfsadm && $make $1)
(cd $SRC/cmd/smbsrv && $make $1)

# Build the MDB modules, WITH the linktest
(cd $SRC/cmd/mdb/tools && $make $1)
for a in $mdb_arch
do
  if [ $1 = install ]; then
    (cd $SRC/cmd/mdb/$x/$a/kmdb &&
	$make kmdb_modlinktest.o )
  else
    (cd $SRC/cmd/mdb/$x/$a/kmdb &&
	$make -k $1 )
  fi
  (cd $SRC/cmd/mdb/$x/$a/nsmb &&
	$make $1 KMDB_LINKTEST_ENABLE= )
  (cd $SRC/cmd/mdb/$x/$a/smbfs &&
	$make $1 KMDB_LINKTEST_ENABLE= )
  (cd $SRC/cmd/mdb/$x/$a/smbsrv &&
	$make $1 KMDB_LINKTEST_ENABLE= )
done

(cd $SRC/cmd/Adm/sun && $make $1)

# Deal with mode 0400 file annoyance...
# See usr/src/cmd/Adm/sun/Makefile
if [ $1 = install ]; then
  chmod a+r $ROOT/var/smb/smbpasswd
fi
}


################################################################
# This builds $SRC/TAGS (and cscope.files) in a helpful order.

do_tags() {
	(cd $SRC ;
	find uts/common/sys -name '*.[ch]' -print |sort
	find uts/common/net -name '*.[ch]' -print |sort
	find uts/common/netinet -name '*.[ch]' -print |sort
	find uts/common/smb -name '*.[ch]' -print |sort
	find uts/common/smbsrv -name '*.ndl' -print |sort
	find uts/common/smbsrv -name '*.[ch]' -print |sort
	find uts/common/fs/smbsrv -name '*.[ch]' -print |sort
	find lib/libsmbfs -name '*.[ch]' -print |sort
	find lib/smbsrv -name '*.[ch]' -print |sort
	find cmd/smbsrv -name '*.[ch]' -print |sort
	find common/smbsrv -name '*.[ch]' -print |sort
	) > $SRC/cscope.files

	(cd $SRC ;
	exctags -e --langmap=c:+.ndl -h ndl -L - < cscope.files
	cscope -b )
}

################################################################

if [ "$1" = "" ]; then
  set '?' # force usage
fi

set -x

for arg
do
  case "$arg" in
  build|install)
    arg=install
    build_tools
    set -e
    do_hdrs $arg
    do_kern $arg
    do_libs $arg
    do_cmds $arg
    ;;
  lint)
    do_kern $arg
    do_libs $arg
    do_cmds $arg
    ;;
  clean)
    do_cmds $arg
    do_libs $arg
    do_kern $arg
    ;;
  clobber)
    do_cmds $arg
    do_libs $arg
    do_kern $arg
    do_hdrs $arg
    clobber_tools
    ;;
  tags)
    do_tags
    ;;
  *)
    echo "Usage: $0 {build|lint|clean|clobber|tags}";
    exit 1;
    ;;
  esac
done
